JPK_V7M is an app for ERPNext, based on Frappe framework. Below informations are for developers that are new to Frappe and want to modify this app.

It's still WORK IN PROGRESS!

General notes to this file:
- Things in square brackets should be replaced with your data. For example: sites/[site_name]/site_config.json means that in place of [site_name] should be your site name, eg. sites/site1.local/site_config.json

1. Before you start:

Frappe and everything based on frappe is quite specific. It gives you number of ways to interfere, but it uses specific concepts and abstractions. That's why it looks overwhelming at first. But don't panic: once you learn the basics, everything starts to seem simple.

2. How to install frappe and erpnext:

- If you just want to try erpnext: use pre-installed virtual box image - it has some limitations, but it's easy.
- If you want to try erpnext on real hardware, but with minimal effort: use the OS that is most supported by Frappe (Ubuntu 18.04 LTS at the moment of writing this text) and use "easy install script". It should be easy, but installation takes some time and it uses default names.
- If you are ready to install frappe from scratch: check "The Hitchhiker's Guide to Installing Frappe on Linux", and configure it according to your needs.
Note: you can choose your own names for many things, like account to install frappe, installation folder, site name, etc., instead of default ones. Leaving default names makes your instance more vulnerable to automated hacking.

3. Basic folder structure:

Most interesting things at the moment (other files and folders omitted for clear view):

frappe-bench/
├─ apps/
│  ├─ jpk_v7m/
│  │  ├─ jpk_v7m/
│  │     ├─ external_tools/
│  │     ├─ jpk_v7m/
│  │     │  ├─ doctype/
│  │     │  ├─ workspace/
│  │     ├─ hooks.py
├─ sites/

If you installed frappe and erpnext with default settings, the main folder is called frappe-bench. It's not obligatory name. You can choose the one that suits your needs, but keep in mind that if you ask for help, most people will mention "frappe-bench" name.
Note: You can install more instances of frappe in different folders. For example, my development instance is installed in folder called erpnext-dev (instead of frappe-bench).

Most important subfolders in the main folder are:
- apps: contains files of frappe, erpnext and other (including custom) apps. Yes, Frappe is also an app itself.
- sites: contains files for sites created with this installed instance. You can have a few (or many) sites sharing the same "base", with no need for separate installations.

If you want to create or modify some app (including frappe and erpnext), you will work with "apps" folder and it's subfolders.

Note: To be able to make some changes in frappe, erpnext and other apps, you have to add a row in sites/common_site_config.json (for all sites), or in sites/[site_name]/site_config.json (for individual site only) containing:
"developer_mode": 1,
Remember to separate it from other records with a comma. Missing comma is frequent mistake.

4. App folder structure:

If you installed JPK_V7M app, you can find "jpk_v7m" subfolder in [frappe-bench folder]/apps. You can treat this subfolder as "external envelope" for the app. Most files in this folder are generated by bench during creation of the app and have easy to understand names (licence, requirements, etc.). File setup.py contains general informations about app.

In jpk_v7m you can find another jpk_v7m folder. It's the "real" main folder for the app. For example: If you want to import something from external_tools, you use jpk_v7m/external_tools, not jpk_v7m/jpk_v7m/external_tools, nor apps/jpk_v7m/jpk_v7m/external_tools, etc.
Note: In hooks.py you can add things that will change other apps: custom fields, css, js, overrides, etc.

There is third level of jpk_v7m (.../apps/jpk_v7m/jpk_v7m/jpk_v7m/). This one is for "module" in frappe. Every app can create one or more modules. Modules are for grouping doctypes. New doctypes assigned to the JPK_V7M module will appear in apps/jpk_v7m/jpk_v7m/jpk_v7m/doctype folder. The name could be different - it doesn't have to be same as app name.

In module folder, there are 2 interesting subfolders:
- doctype
- workspace

The doctype folder contains files for separate DocTypes assigned to the module.
Note: DocType is basic concept of Frappe. It's the building brick. The name comes from "document type", but many other things are DocTypes: button, field, table, etc.

The workspace folder contains files for "workspace" in Frappe. If you log into your installed ERPNext instance and switch to desk, and choose some module (e.g. JPK), you see workspace.
Note: you don't have to modify workspace files manually. Correct way is to type "workspace list" in search bar (also called "awesome bar"), and find (or add) required workspace and edit it. If you want to add it to the app (not to the installed instance of frappe only), set "is standard". If you see "is standard" in other places (e.g. DocTypes), setting it usually will casue creation of some files, instead of database records only. So if you set "is standard", you will have files to work with, or copy.

5. Modification levels:

Frappe can be modified by:

- "customization" - changes made in visual editor, for local instance (e.g. custom scripts, custom fields). Some things can be achieved without a single line of code and without "developer_mode" turned on. To share local changes with other instance, you have to export the "fixtures" to custom app.

- custom "app" - probably the most usefull level of modifications, but requires some programming skills. Name suggests "stand alone" application, but it can be used for easy sharing of small modifications, too. You can create an app e.g. when you want to add the same custom fields in various instances. App can (but doesn't have to) contain own modules, doctypes, fields, scripts, etc., and can modify parts of other apps (including frappe and erpnext), like custom fields and custom scripts. But some changes can't be made by app and require direct modification of code of other app.

- frappe/erpnext code modification - most powerfull (you can change anything), but can cause conflicts during updates. If your changes can be usefull for other ERPNext users, you should make a pull request (PR), so it can become part of official ERPNext version and solve your problem with conflicts. Accepting PR can take a long time: you have to wait a few days for somebody to review your code, this person can suggest some changes that you should make, and after making the changes you can wait a few more days for next review (and maybe next suggestions)... Sometimes you will have to explain the reason why it should be part of official version. Open source projects are driven by contributors, but I was disappointed by the long process and by lack of help from the core team. That's why this app is separate, not contributed to ERPNext, yet.

Note: For things that are country-specific you can use apps/erpnext/erpnext/regional/.

6. DocType modifications

How to change DocType view:

Even if you don't have developer_mode turned on, you can "customize" the forms. On document click button with "..." and "Customize". Changes are for local instance only, but can be exported to custom app.

In developer mode you can edit DocType directly (adding standard fields instead of custom fields), in visual editor, without need to modify anything in json by hand. Type "DocType List" in search bar, or go to Administration -> Customization -> DocType, or in document view click "Edit DocType".

How to change the DocType behaviour:

If you don't have developer_mode turned on, you can add server script or client script in visual editor from "Build" section, but there are many restrictions what you can do. You can use them if the script is specific to your site.

In developer mode, you can change the .js and .py files of doctypes directly. If you want to change the behaviour of doctype from other app, you should use hooks.py.

Every doctype has following files:
- [doctype_name].js - for client side (in browser). JS script can call whitelisted Python methods and can change client-side behaviour. You can't call not whitelisted methods, so most business logic is not possible (and shouldn't be done) for client side scripts.
- [doctype_name].json - automatically generated file, contains informations about fields: names, types, order in form, default values, etc. - everything can be set in visual editor, so better don't change anything here.
- [doctype_name].py - python script, contains server side logic and calculations.
- test_(...) - files used for automated testing

Optional files:
- [doctype_name]_dashboard.py, [doctype_name]_list.js, etc. - for customization of dashboard view, list view, etc., can be generated automatically when needed.

7. How to check field names of some doctype:

The easiest way is to open corresponding json file and look for "field order".

8. Tables
Tables can only contain doctypes set as childtable. If you want to make a list of some documents, you have to create a doctype representing single row, set it as "child table" and add the fields that you want do display. You can add "Link" type field and enter DocType in "Options". If you want do display more than a name, you can add "read only" field, click "Edit" and set "Fetch from" fields. The first field in "Fetch from" will contain list of doctypes linked in other fields, and if you choose one, the second will contain list of fields from choosen doctype.

9. DocTypes of JPK_V7M and what you can learn reading them:

JPK Company Settings
- Contains data required for JPK header.
- JS: clear table, call python script, show frappe alert, set "not saved", refresh displayed data according to changes made by python script
- Python: whitelist method, fill table (add rows, insert data), copy data from one table to other table, check if table contains item, find leaf nodes of tree structure, get document, get filtered list of names of documents, get list of document names with "pluck" (as plain list, not list of {name: "..."})

JPK Tax Accounts Table Item
- Used in tax accounts tables in JPK Company Settings. Contains only 1 field.

JPK Tax Office
- Contains tax office names and codes. Fields are set as "required" (can't be empty) and "unique" (there can't be more than 1 tax office with the same name or the same code)

JPK Tax Office Importer
- Imports tax office codes from XSD provided by Polish Ministry of Finance
- JS: button click response, read values from fields of form, call python function with arguments
- Python: call external tool, check if document exist, create document, rename document, update document

JPK_V7M:
- Creates JPK_V7M XML
- JS: set initial values in form fields, check if document is saved, toggle collapse section, reaction on field value changed, copy data from other doctype
- Python: custom automatic naming, list documents with similar name, get other app version, file operations, check if document has field with given name, site paths, throw frappe error, reading various documents: purchase and sales invoices, addresses, countries


